openapi: 3.0.3
info:
  title: Packed API
  description: Back-End API for Packed, a simple application for learning Contract Testing with Pact
  version: 1.0.0
servers:
  - url: http://localhost:5024/
    description: Local development server
  - url: https://api.packed.io/
    description: Production server
tags:
  - name: Lists
    description: View and modify lists
  - name: Items
    description: Manage items and pack them into containers
  - name: Containers
    description: Manage and query the containers used to pack items
paths:
  /lists:
    get:
      tags:
        - Lists
      summary: Get all lists
      description: >
        Retrieve all lists which have been created. A list stores items and containers and
        provides further access to both entities.
      operationId: getAllLists
      responses:
        "200":
          description: All lists are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/List"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Lists
      summary: Create a new list
      description: >
        Create a new list. Can specify the lists items and containers if they are known ahead of time.
      operationId: addNewList
      requestBody:
        description: New list information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/List"
      responses:
        "201":
          description: The new list was created successfully, and a representation of the list is returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"
          links:
            GetNewListById:
              operationId: getListById
              parameters:
                listId: "$response.body#/listId"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /lists/{listId}:
    parameters:
      - name: listId
        in: path
        description: Identity of the list
        required: true
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - Lists
      summary: Get a list by ID
      description: Given the unique integer identifier of a list, retrieve information about that specific list.
      operationId: getListById
      responses:
        "200":
          description: The list with given ID is returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - Lists
      summary: Update the list with given ID
      description: Update the list which has the specified ID.
      operationId: updateListById
      requestBody:
        description: Updated list information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/List"
      responses:
        "200":
          description: The list was updated successfully, and a representation of the list is returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Lists
      summary: Delete the list with given ID
      description: Delete the list which has the specified ID
      operationId: deleteListById
      responses:
        "204":
          description: The list was deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /lists/{listId}/items:
    parameters:
      - name: listId
        in: path
        description: Identity of the list
        required: true
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - Items
      summary: Get all items in the specified list
      description: Given a specific list, retrieve all items which currently exist in that list
      operationId: getAllItemsForList
      responses:
        "200":
          description: All items are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Items
      summary: Create a new item
      description: For the given list, create a new item
      operationId: addNewItemToList
      requestBody:
        description: The new item to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "201":
          description: The new item was created in the specified list and a representation of the item is returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
          links:
            GetNewItemById:
              operationId: getItemById
              parameters:
                listId: "$request.path.listId"
                itemId: "$response.body#/itemId"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /lists/{listId}/items/{itemId}:
    parameters:
      - name: listId
        in: path
        description: Identity of the list
        required: true
        schema:
          type: integer
          minimum: 1
      - name: itemId
        in: path
        description: Identity of the item
        required: true
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - Items
      summary: Get a specific item
      description: Retrieve all information about a particular item in a particular list
      operationId: getItemById
      responses:
        "200":
          description: The item is found and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - Items
      summary: Update an item's name and quantity
      description: Update an existing item in a list. Note that only the item's name and quantity may be changed.
      operationId: updateExistingItem
      requestBody:
        description: New representation of the item
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "200":
          description: The item was successfully updated. A representation of the item is returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
          links:
            GetUpdatedItem:
              operationId: getItemById
              parameters:
                listId: "$request.path.listId"
                itemId: "$request.path.itemId"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Items
      summary: Delete an item from a list
      description: Remove a specific item from a list. Note that all placements will also be lost.
      operationId: deleteExistingItem
      responses:
        "204":
          description: The item was successfully deleted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /lists/{listId}/containers:
    parameters:
      - name: listId
        in: path
        description: Identity of the list
        required: true
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - Containers
      summary: Get all existing containers
      description: Retrieve all containers which currently exist for the given list
      operationId: getAllContainersForList
      responses:
        "200":
          description: All existing containers belonging to the specified list are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Container"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Containers
      summary: Add a new container
      description: >
        Add a new container with given name to the specified list. 
        Note that container names must be unique within a list
      operationId: addNewContainerToList
      requestBody:
        description: Information about the new container
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Container"
      responses:
        "201":
          description: New container is created and a representation is returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Container"
          links:
            GetCreatedContainer:
              operationId: getContainerById
              parameters:
                listId: "$request.path.listId"
                containerId: "$response.body#/containerId"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /lists/{listId}/containers/{containerId}:
    parameters:
      - name: listId
        in: path
        description: Identity of the list
        required: true
        schema:
          type: integer
          minimum: 1
      - name: containerId
        in: path
        description: Identity of the container
        required: true
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - Containers
      summary: Get a specific container
      description: Get information about a specific container in a specified list
      operationId: getContainerById
      responses:
        "200":
          description: Container is found and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Container"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - Containers
      summary: Update a container
      description: Update an existing container in a list. Currently, only an update to the container's name is supported
      operationId: updateContainerById
      requestBody:
        description: A representation of the updated container
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Container"
      responses:
        "200":
          description: The container was found and updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Container"
          links:
            GetUpdatedContainer:
              operationId: getContainerById
              parameters:
                listId: "$request.path.listId"
                containerId: "$request.path.containerId"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Containers
      summary: Remove a container from a list
      description: Remove the specified container from the given list. Note that all placements will be lost
      operationId: removeContainerFromList
      responses:
        "204":
          description: The container was found and removed
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  schemas:
    List:
      required:
        - description
      properties:
        listId:
          type: integer
          description: A unique integer identifier for the list
          readOnly: true
          nullable: false
        description:
          type: string
          description: A description of the list
          readOnly: false
          nullable: false
        items:
          type: array
          description: All items currently in the list
          readOnly: true
          nullable: false
          items:
            $ref: "#/components/schemas/Item"
        containers:
          type: array
          description: All containers currently in the list
          readOnly: true
          nullable: false
          items:
            $ref: "#/components/schemas/Container"
    Item:
      required:
        - name
        - quantity
      properties:
        itemId:
          type: integer
          description: A unique integer identifier for the item
          readOnly: true
          nullable: false
        name:
          type: string
          description: A description of the item. Descriptions must be unique inside a given list.
          readOnly: false
          nullable: false
        quantity:
          type: integer
          description: The total quantity in the list for this particular item. Must be positive
          readOnly: false
          nullable: false
          minimum: 1
        placements:
          type: array
          description: All placements related to this item
          readOnly: true
          nullable: false
          items:
            $ref: "#/components/schemas/ItemPlacement"
    ItemPlacement:
      required:
        - containerId
      properties:
        placementId:
          type: integer
          description: A unique integer identifier for the placement
          readOnly: true
          nullable: false
        containerId:
          type: integer
          description: The container that the item was placed into
          readOnly: false
          nullable: false
    Container:
      required:
        - name
      properties:
        containerId:
          type: integer
          description: A unique integer identifier for the container
          readOnly: true
          nullable: false
        name:
          type: string
          description: The name of the container. Must be unique within a list.
          readOnly: false
          nullable: false
    ApiError:
      properties:
        type:
          type: string
          format: uri
          description: A URI which references the specific error type
          example: "errors/InternalServerError"
        title:
          type: string
          description: A short description of the error
          example: "Internal Server Error"
        status:
          type: integer
          description: The HTTP status code representing the error
          example: 500
        detail:
          type: string
          description: A longer description of the error with helpful information about the error
          example: "An internal server error occurred during the processing of the request"
        instance:
          type: string
          format: uri
          description: The URI the user requested (for reference)
          example: "https://api.packed.io/lists"
        errorId:
          type: string
          format: uuid
          description: A unique identifier for the error so that it may be located in error logs
          example: "45001b4d-c4dd-4598-8548-260dc89f3088"
        timestamp:
          type: string
          format: date-time
          description: The time at which the error occurred
          example: "2022-12-09T:17:55:55:555Z"
  responses:
    BadRequest:
      description: The client made an improperly formatted request
      content:
        application/json:
          schema:
            $ref: "#components/schemas/ApiError"
          example:
            type: "errors/BadRequest"
            title: "Bad Request"
            status: 400
            detail: "Client made an improperly formatted request"
            instance: "https://api.packed.io/lists"
            errorId: "45001b4d-c4dd-4598-8548-260dc89f3088"
            timestamp: "2022-07-17T:17:55:59:130Z"
    Unauthorized:
      description: Client could not be identified
      content:
        application/json:
          schema:
            $ref: "#components/schemas/ApiError"
          example:
            type: "errors/Unauthorized"
            title: "Unauthorized"
            status: 401
            detail: "Client could not be identifier. Re-authenticating may fix this error"
            instance: "https://api.packed.io/lists"
            errorId: "45001b4d-c4dd-4598-8548-260dc89f3088"
            timestamp: "2022-07-17T:17:55:59:130Z"
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: "#components/schemas/ApiError"
          example:
            type: "errors/NotFound"
            title: "Resource Not Found"
            status: 404
            detail: "The requested resource could not be located"
            instance: "https://api.packed.io/lists/1"
            errorId: "45001b4d-c4dd-4598-8548-260dc89f3088"
            timestamp: "2022-07-17T:17:55:59:130Z"
    Conflict:
      description: An attempt to add or update an resource conflicts with another resource on the server
      content:
        application/json:
          schema:
            $ref: "#components/schemas/ApiError"
          example:
            type: "errors/Conflict"
            title: "Resource Conflict"
            status: 409
            detail: "The provided resource conflicts with an existing resource on the server"
            instance: "https://api.packed.io/lists/1"
            errorId: "45001b4d-c4dd-4598-8548-260dc89f3088"
            timestamp: "2022-07-17T:17:55:59:130Z"
    InternalServerError:
      description: The server encountered an error while processing the request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            type: "errors/InternalServerError"
            title: "Internal Server Error"
            status: 500
            detail: "An internal server error occurred during the processing of the request"
            instance: "https://api.packed.io/lists"
            errorId: "45001b4d-c4dd-4598-8548-260dc89f3088"
            timestamp: "2022-07-17T:17:55:59:130Z"
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: X-PACKED-KEY
security:
  - ApiKey: []

